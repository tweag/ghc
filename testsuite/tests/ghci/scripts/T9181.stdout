type GHC.TypeLits.AppendSymbol :: GHC.Types.Symbol
                                  -> GHC.Types.Symbol -> GHC.Types.Symbol
type family GHC.TypeLits.AppendSymbol a b
type GHC.TypeLits.CmpSymbol :: GHC.Types.Symbol
                               -> GHC.Types.Symbol -> Ordering
type family GHC.TypeLits.CmpSymbol a b
type GHC.TypeLits.ErrorMessage :: *
data GHC.TypeLits.ErrorMessage
  = GHC.TypeLits.Text GHC.Types.Symbol
  | forall t. GHC.TypeLits.ShowType t
  | GHC.TypeLits.ErrorMessage
    GHC.TypeLits.:<>:
    GHC.TypeLits.ErrorMessage
  | GHC.TypeLits.ErrorMessage
    GHC.TypeLits.:$$:
    GHC.TypeLits.ErrorMessage
type GHC.TypeLits.KnownSymbol :: GHC.Types.Symbol -> Constraint
class GHC.TypeLits.KnownSymbol n where
  GHC.TypeLits.symbolSing :: GHC.TypeLits.SSymbol n
  {-# MINIMAL symbolSing #-}
type GHC.TypeLits.SomeSymbol :: *
data GHC.TypeLits.SomeSymbol
  = forall (n :: GHC.Types.Symbol).
    GHC.TypeLits.KnownSymbol n =>
    GHC.TypeLits.SomeSymbol (Data.Proxy.Proxy n)
type GHC.TypeLits.TypeError :: forall b.
                               GHC.TypeLits.ErrorMessage -> b
type family GHC.TypeLits.TypeError a where
GHC.TypeLits.natVal ::
  GHC.TypeNats.KnownNat n => proxy n -> Integer
GHC.TypeLits.natVal' ::
  GHC.TypeNats.KnownNat n => GHC.Prim.Proxy# n -> Integer
GHC.TypeLits.sameSymbol ::
  (GHC.TypeLits.KnownSymbol a, GHC.TypeLits.KnownSymbol b) =>
  proxy1 a -> proxy2 b -> Maybe (a Data.Type.Equality.:~: b)
GHC.TypeLits.someNatVal :: Integer -> Maybe GHC.TypeNats.SomeNat
GHC.TypeLits.someSymbolVal :: String -> GHC.TypeLits.SomeSymbol
GHC.TypeLits.symbolVal ::
  GHC.TypeLits.KnownSymbol n => proxy n -> String
GHC.TypeLits.symbolVal' ::
  GHC.TypeLits.KnownSymbol n => GHC.Prim.Proxy# n -> String
type (GHC.TypeNats.*) :: GHC.Types.Nat
                         -> GHC.Types.Nat -> GHC.Types.Nat
type family (GHC.TypeNats.*) a b
type (GHC.TypeNats.+) :: GHC.Types.Nat
                         -> GHC.Types.Nat -> GHC.Types.Nat
type family (GHC.TypeNats.+) a b
type (GHC.TypeNats.-) :: GHC.Types.Nat
                         -> GHC.Types.Nat -> GHC.Types.Nat
type family (GHC.TypeNats.-) a b
type (GHC.TypeNats.<=) :: GHC.Types.Nat
                          -> GHC.Types.Nat -> Constraint
type (GHC.TypeNats.<=) x y =
  (x GHC.TypeNats.<=? y) ~ 'True :: Constraint
type (GHC.TypeNats.<=?) :: GHC.Types.Nat -> GHC.Types.Nat -> Bool
type family (GHC.TypeNats.<=?) a b
type GHC.TypeNats.CmpNat :: GHC.Types.Nat
                            -> GHC.Types.Nat -> Ordering
type family GHC.TypeNats.CmpNat a b
type GHC.TypeNats.Div :: GHC.Types.Nat
                         -> GHC.Types.Nat -> GHC.Types.Nat
type family GHC.TypeNats.Div a b
type GHC.TypeNats.KnownNat :: GHC.Types.Nat -> Constraint
class GHC.TypeNats.KnownNat n where
  GHC.TypeNats.natSing :: GHC.TypeNats.SNat n
  {-# MINIMAL natSing #-}
type GHC.TypeNats.Log2 :: GHC.Types.Nat -> GHC.Types.Nat
type family GHC.TypeNats.Log2 a
type GHC.TypeNats.Mod :: GHC.Types.Nat
                         -> GHC.Types.Nat -> GHC.Types.Nat
type family GHC.TypeNats.Mod a b
type GHC.Types.Nat :: *
data GHC.Types.Nat
type GHC.TypeNats.SomeNat :: *
data GHC.TypeNats.SomeNat
  = forall (n :: GHC.Types.Nat).
    GHC.TypeNats.KnownNat n =>
    GHC.TypeNats.SomeNat (Data.Proxy.Proxy n)
type GHC.Types.Symbol :: *
data GHC.Types.Symbol
type (GHC.TypeNats.^) :: GHC.Types.Nat
                         -> GHC.Types.Nat -> GHC.Types.Nat
type family (GHC.TypeNats.^) a b
GHC.TypeNats.sameNat ::
  (GHC.TypeNats.KnownNat a, GHC.TypeNats.KnownNat b) =>
  proxy1 a -> proxy2 b -> Maybe (a Data.Type.Equality.:~: b)
